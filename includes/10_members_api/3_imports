<h2 id='a-name-members-imports-a-members-imports-1'><span id=a-name-members-imports-a-members-imports></span><a name="members-imports"></a> Members Imports</h2><h3 id='a-name-members-imports-import-flow-a-introduction-1'><span id=a-name-members-imports-import-flow-a-introduction></span><a name="members-imports-import-flow"></a> Introduction</h3>
<p>This API allows to create (or update large amount of members.</p>

<p>At most 1000 member records may be sent in one request.
If you intend to run an import more than that, you may group them by <code>import_id</code>, so multiple bulks will be grouped into one import.</p>
<h5 id='updating-1'><span id=updating></span>Updating</h5>
<p>With <code>operation: &quot;update&quot;</code> param given, members will be updated. Only attributes present in payload will be updated.</p>

<p>You can specify by which attribute (<code>id</code>, <code>msisdn</code>, <code>email</code>) members for update will be identified.</p>
<h5 id='import-statuses-1'><span id=import-statuses></span>Import statuses</h5>
<p>Each bulk is processed by an asynchronous job, so you need to check it&#39;s status some time after sending a request.</p>

<p>For that, you should firstly check the import status <a href="#members-imports-status">here</a> and then 
check bulks details for each bulk <a href="#members-imports-bulk-status">here</a>.</p>

<p>Please note that:</p>

<ul>
<li>We recommend to check status in intervals not smaller than 5 seconds</li>
<li>In extreme cases, it make take even few hours for bulk to be fully processed</li>
<li>24 hours after import request any potential personal data (contained in <code>member_payloads</code> and <code>errors</code>) is permanently removed from server</li>
</ul>
<h5 id='bulk-statuses-1'><span id=bulk-statuses></span>Bulk statuses</h5>
<p>When bulk is created, it gets <code>waiting</code> status.</p>

<p>When bulk has been picked by asynchronous job, it transitions into <code>working</code> status.
Depending on the server load, it may get picked instantly or even after few hours in extreme cases.</p>

<p>When the job has been executed successfully (which make take up to few minutes), bulk will have <code>finished</code> status assigned.
Please note that it doesn&#39;t mean that members have been successfully processed (there may be even none), you&#39;ll need to check bulk status
for errors.</p>

<p>When job failed for some internal reason, it will have either <code>failed</code> or <code>waiting_for_retry</code> status. See below
for more details.  </p>
<h5 id='asynchronous-job-failures-1'><span id=asynchronous-job-failures></span>Asynchronous job failures</h5>
<p>Jobs that couldn&#39;t be processed because of some internal reasons will be retried up to 5 times.</p>

<p>After each failure, the bulk will have <code>waiting_for_retry</code> status assigned and it&#39;s <code>retries</code> attribute will be incremented.</p>

<p>After 5th failure, the bulk will have <code>failed</code> status assigned. In such case, please contact us, so we may identify 
and resolve the problem.</p>
<h3 id='a-name-members-imports-a-send-import-request-1'><span id=a-name-members-imports-a-send-import-request></span><a name="members-imports"></a> Send import request</h3>
<p><strong>POST</strong> <code>v3/:loyalty_club_slug/members/imports</code></p>

<p>Creates new members or updates existing ones (based on <code>msisdn</code> and <code>e-mail</code> identifiers).</p>

<p>There is a maximum number of members that can be sent in one request (1000). So, if you intend to import more than 
that, you may want to identify all bulks with the same <code>import_id</code> and pass consequent <code>request_number</code> to each of them.</p>

<blockquote>
<p>Example:</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>curl -X POST <span class="se">\</span>
    <span class="s2">"https://api.mpc.placewise.com/v3/infinity-mall/members/imports"</span> <span class="se">\</span>
    -H <span class="s1">'content-type: application/json'</span> <span class="se">\</span>
    -H <span class="s1">'x-client-authorization: B7t9U9tsoWsGhrv2ouUoSqpM'</span> <span class="se">\</span>
    -H <span class="s1">'x-product-name: default'</span> <span class="se">\</span>
    -H <span class="s1">'x-user-agent: CURL manual test'</span>
  -d <span class="se">\</span>
    <span class="s1">'{
      "import_id": "import_21",
      "request_number": 3,
      "operation": "create",
      "members": [
        {
          "properties": { "email": "foo@bar.baz" },
          "password": "pass",
          "sms_enabled": true,
          "email_enabled": true,
          "push_enabled": true,
          "optin_channel": true,
          "optin_subchannel": true,
          "created_at": "foo",
          "updated_at": "bar",
          "consents": { "email_marketing": { "status": true } }
        }
      ]
    }'</span>    
</code></pre>
<blockquote>
<p>When successful, JSON will be returned:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"import_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a9a00143-6488-4d4f-87d4-29c2da02d678"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<blockquote>
<p>When input is invalid, returns the error object:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="s2">"duplicated_msisdns"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre><h4 id='post-parameters-json-1'><span id=post-parameters-json></span>POST Parameters (JSON)</h4>
<table><thead>
<tr>
<th>Parameter</th>
<th>Required?</th>
<th>Default</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>import_id</td>
<td>no</td>
<td>auto-generated</td>
<td>When you&#39;re making more than one call you can consider adding it. Otherwise it will be auto-generated</td>
<td>String</td>
</tr>
<tr>
<td>request_number</td>
<td>no</td>
<td>-</td>
<td>A number that you can use for bulk identification in &quot;Status&quot; endpoint. It&#39;s up to you to provide it&#39;s uniqueness. Useless without specifying <code>import_id</code></td>
<td>Integer</td>
</tr>
<tr>
<td>members</td>
<td>yes</td>
<td>-</td>
<td>Array with members payloads - See below</td>
<td>Array <JSON Object></td>
</tr>
<tr>
<td>operation</td>
<td>no</td>
<td><code>&quot;create&quot;</code></td>
<td>Should members be created or updated</td>
<td>enum: [&#39;create&#39;, &#39;update&#39;]</td>
</tr>
<tr>
<td>member_identifier_type</td>
<td>no</td>
<td><code>&quot;id&quot;</code></td>
<td>(for <code>&quot;update&quot;</code> operation) Which member property should be used to identify member for update</td>
<td>enum: [&#39;id&#39;, &#39;email&#39;, &#39;msisdn&#39;]</td>
</tr>
</tbody></table>
<h5 id='members-array-1'><span id=members-array></span>Members Array</h5>
<p>General requirements:</p>

<ul>
<li>all members must have unique identifiers (<code>msisdn</code> or <code>email</code>)</li>
<li>maximum number of items in array is 1000</li>
</ul>

<table><thead>
<tr>
<th>Key</th>
<th>Required?</th>
<th>Default</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>properties</td>
<td>yes</td>
<td>-</td>
<td>JSON with properties for member (see: <a href="#member-model">Member model</a></td>
<td>JSON Object</td>
</tr>
<tr>
<td>properties[&#39;msisdn&#39;]</td>
<td>yes*</td>
<td>none</td>
<td>Unique member&#39;s msisdn as defined <a href="#msisdn-param">here</a>) Example: <code>4740769126</code>.</td>
<td>string</td>
</tr>
<tr>
<td>properties[&#39;email&#39;]</td>
<td>yes*</td>
<td>none</td>
<td>Member&#39;s email</td>
<td>string</td>
</tr>
<tr>
<td>password</td>
<td>no</td>
<td>null</td>
<td>Memberâ€™s password. Not required, but user may not be able to log in without this</td>
<td>String</td>
</tr>
<tr>
<td>sms_enabled</td>
<td>no</td>
<td>true</td>
<td>Should SMS channel be enabled for member?</td>
<td>Boolean</td>
</tr>
<tr>
<td>email_enabled</td>
<td>no</td>
<td>true</td>
<td>Should email channel be enabled for member?</td>
<td>Boolean</td>
</tr>
<tr>
<td>push_enabled</td>
<td>no</td>
<td>true</td>
<td>Should push channel be enabled for member?</td>
<td>Boolean</td>
</tr>
<tr>
<td>optin_channel</td>
<td>no</td>
<td>&quot;import&quot;**</td>
<td>Source of member</td>
<td>String</td>
</tr>
<tr>
<td>optin_subchannel</td>
<td>no</td>
<td>import&#39;s id**</td>
<td>Subsource of member</td>
<td>String</td>
</tr>
<tr>
<td>consents</td>
<td>no</td>
<td>{}</td>
<td>Members consents</td>
<td>See <a href="#member-consents-model">Member&#39;s consents JSON model</a></td>
</tr>
</tbody></table>

<p>&ast; At least one of those properties must be provided</p>

<p>&ast;&ast; When those member attributes are missing on creation, defaults will be used. When on update, they won&#39;t be overwritten.</p>
<h4 id='response-json-object-1'><span id=response-json-object></span>Response (JSON object)</h4>
<table><thead>
<tr>
<th>Key</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>import_id</td>
<td>Identifier for import status checking (either provided by you or auto-generated)</td>
<td>String</td>
</tr>
</tbody></table>
<h4 id='error-responses-1'><span id=error-responses></span>Error responses</h4>
<table><thead>
<tr>
<th>Status</th>
<th>Reason</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>422</code></td>
<td>Invalid payload</td>
<td>Returns error object - see below</td>
</tr>
</tbody></table>
<h5 id='invalid-payload-error-json-object-1'><span id=invalid-payload-error-json-object></span>Invalid Payload Error (JSON object)</h5>
<p>When payload is invalid, an object is returned: <code>{&quot;error&quot; =&gt; &lt;reason&gt;}</code></p>

<p>Possible reasons are:</p>

<table><thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>duplicated_emails</code></td>
<td>At least two members in payload share same email</td>
</tr>
<tr>
<td><code>duplicated_msisdns</code></td>
<td>At least two members in payload share same msisdn</td>
</tr>
<tr>
<td><code>members_size_incorrect</code></td>
<td>Members number in payload exceeds maximum (1000)</td>
</tr>
<tr>
<td><code>members_empty</code></td>
<td>Payload is empty</td>
</tr>
<tr>
<td><code>missing_identifier</code></td>
<td>At least one member in payload misses required identifier (depends on Loyalty Club)</td>
</tr>
<tr>
<td><code>invalid_operation</code></td>
<td>Specified operation is not supported</td>
</tr>
<tr>
<td><code>invalid_member_identifier_type</code></td>
<td>Specified identifier type is invalid or unavailable in Loyalty Club</td>
</tr>
</tbody></table>

<aside class="notice">
Requires <code>BL:Api:Members:Imports:Create</code> permit
</aside>
<h3 id='a-name-members-imports-status-a-get-import-status-1'><span id=a-name-members-imports-status-a-get-import-status></span><a name="members-imports-status"></a> Get import status</h3>
<p><strong>GET</strong> <code>v3/:loyalty_club_slug/members/imports/:import_id</code></p>

<p>Returns status of import with a list of references to bulks (<code>id</code> and <code>request_number</code>). </p>

<p>You need to call <a href="#members-import-bulk-status">Members Imports &bull; Get bulk status</a> to see bulks details.</p>

<blockquote>
<p>Example:</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>curl -X GET <span class="se">\</span>
    <span class="s2">"https://api.mpc.placewise.com/v3/infinity-mall/members/imports/:import_id"</span> <span class="se">\</span>
    -H <span class="s1">'content-type: application/json'</span> <span class="se">\</span>
    -H <span class="s1">'x-client-authorization: B7t9U9tsoWsGhrv2ouUoSqpM'</span> <span class="se">\</span>
    -H <span class="s1">'x-product-name: default'</span> <span class="se">\</span>
    -H <span class="s1">'x-user-agent: CURL manual test'</span>
</code></pre>
<blockquote>
<p>When successful, JSON will be returned:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
    </span><span class="s2">"members_in_payloads_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">4000</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_created_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">3020</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_updated_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">531</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_with_validation_errors_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">449</span><span class="p">,</span><span class="w">
    </span><span class="s2">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2018-07-30T11:23:08.417Z"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"bulks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">83473</span><span class="p">,</span><span class="w"> </span><span class="s2">"request_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"finished"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">83474</span><span class="p">,</span><span class="w"> </span><span class="s2">"request_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"failed"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">83475</span><span class="p">,</span><span class="w"> </span><span class="s2">"request_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"working"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">83476</span><span class="p">,</span><span class="w"> </span><span class="s2">"request_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"waiting"</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre><h4 id='url-parameters-1'><span id=url-parameters></span>URL Parameters</h4>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>import_id</td>
<td>Import identifier</td>
</tr>
</tbody></table>
<h4 id='response-json-object-1'><span id=response-json-object></span>Response (JSON object)</h4>
<table><thead>
<tr>
<th>Key</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>members_in_payload_number</td>
<td>A total number of members that were requested for importing</td>
<td>Integer</td>
</tr>
<tr>
<td>members_created_number</td>
<td>A total number of members that were successfully created</td>
<td>Integer</td>
</tr>
<tr>
<td>members_updated_number</td>
<td>A total number of members that were successfully updated</td>
<td>Integer</td>
</tr>
<tr>
<td>members_with_validation_errors_number</td>
<td>A total number of members that had validation errors</td>
<td>Integer</td>
</tr>
<tr>
<td>created_at</td>
<td>The date of import creation</td>
<td>Date</td>
</tr>
<tr>
<td>bulks</td>
<td>A list of bulks in the import</td>
<td>Array<Object>, where Object consists: of <code>id</code>, <code>request_number</code> and <code>status</code> attributes</td>
</tr>
</tbody></table>
<h4 id='error-responses-1'><span id=error-responses></span>Error responses</h4>
<table><thead>
<tr>
<th>Status</th>
<th>Reason</th>
</tr>
</thead><tbody>
<tr>
<td><code>404</code></td>
<td>Job with such ID wasn&#39;t found.</td>
</tr>
</tbody></table>

<aside class="notice">
Requires <code>BL:Api:Members:Imports:Get</code> permit
</aside>
<h3 id='a-name-members-imports-bulk-status-a-get-bulk-status-1'><span id=a-name-members-imports-bulk-status-a-get-bulk-status></span><a name="members-imports-bulk-status"></a> Get bulk status</h3>
<p><strong>GET</strong> <code>v3/:loyalty_club_slug/members/imports/:import_id/bulks/:bulk_id</code></p>

<p><strong>GET</strong> <code>v3/:loyalty_club_slug/members/imports/:import_id/bulks/by_request_number/:request_number</code></p>

<p>Returns status of import bulk.</p>

<blockquote>
<p>Example:</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>curl -X GET <span class="se">\</span>
    <span class="s2">"https://api.mpc.placewise.com/v3/infinity-mall/members/imports/:import_id/bulks/:bulk_id"</span> <span class="se">\</span>
    -H <span class="s1">'content-type: application/json'</span> <span class="se">\</span>
    -H <span class="s1">'x-client-authorization: B7t9U9tsoWsGhrv2ouUoSqpM'</span> <span class="se">\</span>
    -H <span class="s1">'x-product-name: default'</span> <span class="se">\</span>
    -H <span class="s1">'x-user-agent: CURL manual test'</span>
</code></pre>
<blockquote>
<p>When successful, JSON will be returned:</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
    </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">11</span><span class="p">,</span><span class="w">
    </span><span class="s2">"import_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"89405ae3-2dd5-46cb-a13b-840bc588199b"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"request_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="s2">"operation"</span><span class="p">:</span><span class="w"> </span><span class="s2">"create"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"finished"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_in_payload_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">13</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_created_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_updated_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_with_validation_errors_number"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="s2">"retries"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="s2">"members_errors"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"joe@example.com"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"language"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                            </span><span class="p">{</span><span class="w"> 
                              </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="s2">"value_not_match"</span><span class="p">,</span><span class="w">
                              </span><span class="s2">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pl"</span><span class="p">,</span><span class="w">
                              </span><span class="s2">"values"</span><span class="p">:</span><span class="w"> </span><span class="s2">"en, no"</span><span class="p">,</span><span class="w">
                              </span><span class="s2">"property"</span><span class="p">:</span><span class="w"> </span><span class="s2">"language"</span><span class="w">
                            </span><span class="p">}</span><span class="w">
                        </span><span class="p">]</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2018-07-30T17:14:03.738Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre><h4 id='url-parameters-1'><span id=url-parameters></span>URL Parameters</h4>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>import_id</td>
<td>Import identifier</td>
</tr>
<tr>
<td>bulk_id</td>
<td>ID of the bulk</td>
</tr>
<tr>
<td>request_number</td>
<td>Request number of the bulk</td>
</tr>
</tbody></table>
<h4 id='response-json-object-1'><span id=response-json-object></span>Response (JSON object)</h4>
<table><thead>
<tr>
<th>Key</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td>ID of bulk</td>
<td>Integer</td>
</tr>
<tr>
<td>import_id</td>
<td>Import identifier</td>
<td>String</td>
</tr>
<tr>
<td>request_number</td>
<td>The number of the bulk</td>
<td>Integer</td>
</tr>
<tr>
<td>operation</td>
<td>The operation to perform</td>
<td>String</td>
</tr>
<tr>
<td>status</td>
<td>Job status - one of: &#39;waiting&#39;, &#39;working&#39;, &#39;finished&#39;, &#39;failed&#39; &#39;waiting_for_retry&#39; - see more <a href="#members-imports-import-flow">here</a> in &quot;Bulk statuses&quot; section</td>
<td>String</td>
</tr>
<tr>
<td>members_in_payload_number</td>
<td>A number of members that were requested for importing</td>
<td>Integer</td>
</tr>
<tr>
<td>members_created_number</td>
<td>A number of members that were successfully created</td>
<td>Integer</td>
</tr>
<tr>
<td>members_updated_number</td>
<td>A number of members that were successfully updated</td>
<td>Integer</td>
</tr>
<tr>
<td>members_with_validation_errors_number</td>
<td>A number of members that had validation errors</td>
<td>Integer</td>
</tr>
<tr>
<td>retries</td>
<td>A number of background job retries (max 5)</td>
<td>Integer</td>
</tr>
<tr>
<td>members_errors</td>
<td>Members errors. Each invalid member will be returned in this object, where key is his identifier (<code>email</code> or <code>msisdn</code>) and the value is a list of it&#39;s <a href="#validation-on-members">validation errors</a></td>
<td>Object</td>
</tr>
<tr>
<td>created_at</td>
<td>The date of bulk creation</td>
<td>Date</td>
</tr>
</tbody></table>
<h4 id='error-responses-1'><span id=error-responses></span>Error responses</h4>
<table><thead>
<tr>
<th>Status</th>
<th>Reason</th>
</tr>
</thead><tbody>
<tr>
<td><code>404</code></td>
<td>Bulk with such ID wasn&#39;t found.</td>
</tr>
</tbody></table>

<aside class="notice">
Requires <code>BL:Api:Members:Imports:Get</code> permit
</aside>
